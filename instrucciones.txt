Para instalar en un cluster de docker-compose:
    1. Después de clonar o descargar el código, cambie el nombre de la carpeta raíz por el nombre deseado utilizando
    minúsculas y guiones bajo "api_gateway".
    2. Crear o actualizar el archivo de docker-compose.yaml y agregar el servicio o servicios requerido, :
        version: "3"
        services:
            my_service_name:
                container_name: container_name
                image: image_name
                build:
                    context: /path-to-folder/
                    dockerfile: docker/DockerfileDC
                ports:
                    - "8001:80"
                volumes:
                    - "/path-to-folder:/var/www/html"
                command: >
                    sh -c "/usr/sbin/nginx
                    && supervisord"

            db_service_name:
                container_name: db_container_name
                image: mariadb:latest
                ports:
                    - "3306:3306"
                env_file: enviroment_file.env
                volumes:
                    - "/path-to-vol-database/:/var/lib/mysql"

    3. En los archivos descargados del repositorio realizar los siguientes cambios
        - en el archivo dev_commands.sh asignar el nombre del contenedor agregado en servicio en el campo container
        - en el archivo install.sh y uninstall.sh cambiar el valor del campo app_name por el nombre asignado al nombre
        de la carpeta del proyecto
        - en el archivo install.sh y uninstall.sh cambiar la propiedad default_path, por el la ubicación del proyecto en el contenedor

    4. Crear la imagen de los servicios y arrancarlos con los siguientes comandos en el proyecto que almacene el
            archivo docker-compose.yaml:
        - docker-compose up -d

    5. Ejecutar o copiar todo el contenido del archivo dev_commands.sh del repositorio descargado y pegarlo en una consola
        para tener los alias de los comandos de acceso al contenedor

    6. Ejecutar en la consola el comando:
        - install_app

    7. Realice las configuraciones recomendadas después de ejecutar "install_app"

    8. Dentro de la carpeta que contiene el archivo docker-compose.yaml ejecutar el siguiente comando para que octane se inicie
        - docker-compose restart

Para instalar modo local:
    1. Cambiar el nombre de la carpeta del proyecto por el nombre deseado utilizando minúsculas y guiones bajos "api_gateway"
    2. Cambiar en install.sh y uninstall.sh la propiedad app_name, por el nombre asignado a la carpeta del proyecto
    3. Cambiar en install.sh y uninstall.sh la propiedad default_path, por el la ubicación del proyecto
    4. Ejecutar el archivo install.sh ejecutando el comando "./install.sh" en la raíz del proyecto
    5. Realice las configuraciones recomendadas después de ejecutar el comando anterior
    6. Ejecute la migración de la base de datos con el comando "php artisan migrate" en la raíz del proyecto

Para crear la configuración de un servicio nuevo
    1. Primero cree el código base y la instalación del servicio para obtener un access_token para las
    solicitudes desde al api_gateway al servicio
    2. Ejecute el comando "php artisan make:service-connection Name BaseUri AccessToken", el comando creará todos los recursos
    necesarios para conectarse al servicio Name, el comando crea registros de configuración de acuerdo
    al nombre asignado, para personalizar las variables puede ejecutar el comando con los parámetros opcionales:
    "php artisan make:service-connection Name BaseUri AccessToken --path=/example/path"
    Ejemplo "php artisan make:service-connection Contact http://contact_service access_token_1sdsd1f2sdf1 --path=/api/contact --queue=contact_service_queue"

Para resolver trabajos en segundo plano
    1. Ejecute el siguiente comando para y configurar una tarea para resolver en segundo plano
            php artisan make:resolver NombreTarea --event=nombre_evento 
    
        El comando creará un archivo app/Background/NombreTarea.php dentro de la clase incluida en el archivo encontrará
        un método handle, que recibe el nombre del evento y los datos de la petición en segundo plano, realice las tareas
        requeridas y retorne una respuesta que será enviada al api_gateway o servicio que solicitó la acción. El comando
        también configura el archivo config/background.php para el que el evento recibido en --event se asocie a la clase NombreTarea
    
    2. Para ejecutar un worker que reciba las solicitudes de ejecución en segundo plano ejecute el siguiente comando
            php artisan consume:amqp nombre_cola_servicio
        
        Este comando se conectará a la cola que indique en nombre_cola_servicio (para el api gateway generalmente se utiliza api_gateway_queue.default) y de acuerdo al evento recibido ejecutará
        el método handle de la clase asociada al evento en el archivo config/background.php. Si no existe el evento se registrara
        un mensaje en el log.